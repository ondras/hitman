tm-scene {
	--symbol-width: 30px;
	--transition: 1000;
	--duration: calc(var(--transition) * 1ms / 3);

	*, *::before, *::after { box-sizing: border-box; }

	&[skin=plain] {
		--symbol-width: calc(1ch + 2px);
		@line-height: 1.25;

		font-family: monospace;
		line-height: @line-height;

		tm-rules {
			th[data-state]::before { content: attr(data-state); }
			th[data-symbol]::before { content: attr(data-symbol); }
		}

		tm-instruction {
			&::before { content: attr(symbol); }
			&::after { content: attr(state); }
		}

		tm-machine {
			white-space: pre;
			&::before { content: attr(state) "\A"; }
			&::after { content: "â†“"; }
		}

		tm-tape {
			height: calc(@line-height * 1em);
			tm-symbol {
				&::before { content: attr(value); }
			}
		}
	}

	&[skin=robot] {
		--symbol-width: 1.3em;

		tm-instruction::before, tm-instruction::after { margin: 0 4px; }

		tm-machine::before, tm-rules th[data-state]::before, tm-instruction::after {
			content: "ðŸ¤–";
			filter: drop-shadow(0 0 3px var(--color));
		}

		tm-symbol::before, tm-rules th[data-symbol]::before, tm-instruction::before {
			content: "ðŸ’¡";
		}

		tm-symbol[value="0"], tm-rules th[data-symbol="0"], tm-instruction[symbol="0"]::before {
			filter: grayscale(1);
		}

		tm-machine[state="H"], tm-instruction[state="H"]::after {
			transform: rotate(90deg);
		}

		tm-symbol {
			transition: filter var(--duration);
		}
	}

	&[skin=circle] {
		tm-machine {
			width: var(--symbol-width);
			height: var(--symbol-width);
			border-radius: 50%;
			border: 3px solid black;
			background-color: currentColor;

			&[state=A] { color: red; }
			&[state=B] { color: green; }
		}
	}
}
