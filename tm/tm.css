tm-machine {
  transition: all var(--duration) var(--duration), left var(--duration);
  position: relative;
  left: calc(var(--position) * var(--symbol-width));
  width: var(--symbol-width);
  text-align: center;
}
tm-machine::before {
  transition: all var(--duration) var(--duration);
}
tm-rules {
  text-align: center;
}
tm-rules table {
  border-collapse: collapse;
}
tm-rules th,
tm-rules td {
  padding: 0;
  border: 1px solid #333;
}
tm-rules thead th {
  border-bottom-width: 2px;
}
tm-rules th:first-child {
  border-right-width: 2px;
}
tm-rules thead th:first-child {
  border-left: none;
  border-top: none;
}
tm-rules td {
  transition: all var(--duration);
}
tm-rules td.current {
  box-shadow: inset 0 0 4px #000;
}
tm-tape {
  position: relative;
  width: var(--symbol-width);
}
tm-tape tm-symbol {
  position: absolute;
  left: calc(var(--position) * var(--symbol-width));
}
tm-symbol {
  width: var(--symbol-width);
  text-align: center;
}
tm-scene {
  --symbol-width: 30px;
  --transition: 1000;
  --duration: calc(var(--transition) * 1ms / 3);
}
tm-scene *,
tm-scene *::before,
tm-scene *::after {
  box-sizing: border-box;
}
tm-scene[skin=plain] {
  --symbol-width: calc(1ch + 2px);
  font-family: monospace;
  line-height: 1.25;
}
tm-scene[skin=plain] tm-rules th[data-state]::before {
  content: attr(data-state);
}
tm-scene[skin=plain] tm-rules th[data-symbol]::before {
  content: attr(data-symbol);
}
tm-scene[skin=plain] tm-instruction::before {
  content: attr(symbol);
}
tm-scene[skin=plain] tm-instruction::after {
  content: attr(state);
}
tm-scene[skin=plain] tm-machine {
  white-space: pre;
}
tm-scene[skin=plain] tm-machine::before {
  content: attr(state) "\A";
}
tm-scene[skin=plain] tm-machine::after {
  content: "â†“";
}
tm-scene[skin=plain] tm-tape {
  height: calc(1.25 * 1em);
}
tm-scene[skin=plain] tm-tape tm-symbol::before {
  content: attr(value);
}
tm-scene[skin=robot] {
  --symbol-width: 1.3em;
}
tm-scene[skin=robot] tm-instruction::before,
tm-scene[skin=robot] tm-instruction::after {
  margin: 0 4px;
}
tm-scene[skin=robot] tm-machine::before,
tm-scene[skin=robot] tm-rules th[data-state]::before,
tm-scene[skin=robot] tm-instruction::after {
  content: "ðŸ¤–";
  filter: drop-shadow(0 0 3px var(--color));
}
tm-scene[skin=robot] tm-symbol::before,
tm-scene[skin=robot] tm-rules th[data-symbol]::before,
tm-scene[skin=robot] tm-instruction::before {
  content: "ðŸ’¡";
}
tm-scene[skin=robot] tm-symbol[value="0"],
tm-scene[skin=robot] tm-rules th[data-symbol="0"],
tm-scene[skin=robot] tm-instruction[symbol="0"]::before {
  filter: grayscale(1);
}
tm-scene[skin=robot] tm-machine[state="H"],
tm-scene[skin=robot] tm-instruction[state="H"]::after {
  transform: rotate(90deg);
}
tm-scene[skin=robot] tm-symbol {
  transition: filter var(--duration);
}
tm-scene[skin=circle] tm-machine {
  width: var(--symbol-width);
  height: var(--symbol-width);
  border-radius: 50%;
  border: 3px solid black;
  background-color: currentColor;
}
tm-scene[skin=circle] tm-machine[state=A] {
  color: red;
}
tm-scene[skin=circle] tm-machine[state=B] {
  color: green;
}
tm-instruction::before,
tm-instruction::after {
  display: inline-block;
}
tm-machine[state="A"],
tm-rules th[data-state="A"],
tm-instruction[state="A"]::after {
  --color: red;
}
tm-machine[state="B"],
tm-rules th[data-state="B"],
tm-instruction[state="B"]::after {
  --color: lime;
}
tm-machine[state="C"],
tm-rules th[data-state="C"],
tm-instruction[state="C"]::after {
  --color: blue;
}
tm-machine[state="D"],
tm-rules th[data-state="D"],
tm-instruction[state="D"]::after {
  --color: yellow;
}
tm-machine[state="E"],
tm-rules th[data-state="E"],
tm-instruction[state="E"]::after {
  --color: magenta;
}
tm-machine[state="F"],
tm-rules th[data-state="F"],
tm-instruction[state="F"]::after {
  --color: cyan;
}
tm-machine[state="H"],
tm-rules th[data-state="H"],
tm-instruction[state="H"]::after {
  --color: black;
}
